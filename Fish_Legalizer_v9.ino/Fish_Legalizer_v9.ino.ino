/* FishLegalizer.ino
/
/  An Arduino UNO application to enable fisherman to remain in compliance with local fishing laws.
/  Capabilities include a fish weight function, a list of local fishing limit regulations, and
/  supporting instruction sets.
/
////
/
/  v0.1 - initial code routine to test out primary capabilities - Tyler Browning - 2018-MAR-01
/  v0.2 - added monitor output text for all button presses to diagnose button performance;
/         added updateMenu() to each button...it was only on one previously
/  v0.3 - changed button press statements to LOW since we are using INPUT_PULLUPs...which take buttons
/         to HIGH when they are UNpressed.  They should go LOW when pressed.
/  v0.4 - added new cases for sub menus inside of limits menu and added a way to get back to home screen
/         from each one. Also changed scaleLoopBreak to 0 (temporary)
/  v0.5 - updated switch/case statement for menu control of the LIMITS sub-menus;  modified the re-draw statements for
/         the scale amount showing on the SCALE screen
/  v0.7 - fixed load cell problem. This code is completed without the screens for lakes drawing.
/  v0.8 - added lakes screens and filled in limits for each. Still need to add ability to scroll on these screens.
/  v0.9 - added scrolling logic for lakes display;  added splash screen structure
/  v1.0 - added splash screen and got buttons to scroll inside of lakes screen (must recalibrate once installed)
////
/
/  Code support:  Tyler Browning
/
*/

// Arduino INCLUDES
//    SPI interface handlers
#include <SPI.h>
#include <Adafruit_SPITFT.h>
#include <Adafruit_SPITFT_Macros.h>
//    Graphics TFT display handlers
#include <Adafruit_ST7735.h>          // Hardware-specific library
#include <Adafruit_GFX.h>             // Core graphics library
#include <gfxfont.h>
//    Weight sensor handlers
#include <HX711_ADC.h>                // Load cell

// CONSTANTS
//     TFT Display inputs assigned to specific UNO pins
#define TFT_CS     10
#define TFT_RST    9    // you can also connect this to the Arduino reset...in which case, set this #define pin to 0!
#define TFT_DC     8
#define TFT_SCLK   13   // set these to be whatever pins you are using
#define TFT_MOSI   11   // set these to be whatever pins you are using
Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);
//    Menu selection button sensors assigned to specific UNO pins
#define UP_PIN     5
#define DOWN_PIN   7
#define MIDDLE_PIN 6
#define HOME_PIN   3
//    Name references for primary colors for TFT
#define BLACK 0x0000
#define WHITE 0xFFFF
#define GREEN 0x0FF0
#define BLUE  0x000F
#define RED   0xF000
#define PINK  0xF00F
//    HX711 constructor (dout pin, sck pin)
HX711_ADC LoadCell(A1, A0);


const unsigned char splashPageBitmap [] PROGMEM = {
  // 'Artboard 1, 128x128px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x42, 0x00, 0x00, 0xe0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xff, 0x90, 0x00, 0xe0, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x0e, 0x20, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x7f, 0xbc, 0x00, 0xe0, 0x03, 0x80, 0x00, 0x00, 0x00, 0x0e, 0x78, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x7f, 0x3c, 0x00, 0xe0, 0x03, 0x80, 0x00, 0x00, 0x00, 0x0e, 0x78, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x78, 0x0c, 0x40, 0xec, 0x03, 0x80, 0x00, 0x00, 0x00, 0x0e, 0x18, 0x00, 0x00, 0x72, 0x00, 
  0x00, 0x70, 0x18, 0xf8, 0xff, 0x03, 0x80, 0x20, 0x17, 0x06, 0x0e, 0x20, 0x7e, 0x10, 0x7f, 0x00, 
  0x00, 0x70, 0x1d, 0xfc, 0xff, 0x03, 0x80, 0xf8, 0x3f, 0x1f, 0x8e, 0x79, 0xfe, 0x7c, 0x7e, 0x00, 
  0x00, 0x74, 0x1d, 0xdc, 0xf7, 0x03, 0x80, 0xfc, 0x77, 0x3f, 0xce, 0x79, 0xfe, 0x7e, 0x7e, 0x00, 
  0x00, 0x7e, 0x1d, 0xdc, 0xf7, 0x03, 0x81, 0xdc, 0xf7, 0x39, 0xce, 0x70, 0x3c, 0xee, 0x7c, 0x00, 
  0x00, 0x7f, 0x1c, 0xcc, 0xe7, 0x03, 0x81, 0xdc, 0xe7, 0x07, 0xce, 0x70, 0x38, 0xee, 0x78, 0x00, 
  0x00, 0x7f, 0x1c, 0x70, 0xe7, 0x03, 0x81, 0xfc, 0xe7, 0x1f, 0xce, 0x70, 0x78, 0xfe, 0x78, 0x00, 
  0x00, 0x78, 0x1c, 0x38, 0xe7, 0x03, 0x81, 0xf8, 0xe7, 0x3d, 0xce, 0x70, 0xf0, 0xfc, 0x70, 0x00, 
  0x00, 0x70, 0x1d, 0xdc, 0xe7, 0x03, 0xb9, 0xc0, 0xef, 0x3b, 0xce, 0x70, 0xe0, 0xe4, 0x70, 0x00, 
  0x00, 0x70, 0x1d, 0xdc, 0xe7, 0x03, 0xfd, 0xce, 0xef, 0x77, 0xce, 0x71, 0xc0, 0xe6, 0x70, 0x00, 
  0x00, 0x70, 0x1c, 0xfc, 0xe7, 0x83, 0xfd, 0xdc, 0x7f, 0x3f, 0xce, 0x73, 0xfc, 0xee, 0x70, 0x00, 
  0x00, 0x70, 0x3c, 0x7c, 0xe7, 0x83, 0xf0, 0xfc, 0x7f, 0x3f, 0xce, 0x7b, 0xfc, 0x7c, 0x70, 0x00, 
  0x00, 0x30, 0x1c, 0x18, 0x60, 0x00, 0xc0, 0x78, 0x37, 0x1c, 0xc6, 0x39, 0xf0, 0x38, 0x30, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xc0, 0x00, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x60, 0x07, 0xc0, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x60, 0x0e, 0x3f, 0x9c, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x38, 0xf3, 0xef, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x30, 0xf3, 0x80, 0x3f, 0x60, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x11, 0xc7, 0x00, 0x0e, 0x40, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x37, 0x1c, 0x00, 0x06, 0x60, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x7e, 0x38, 0x00, 0x06, 0x60, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x78, 0xe0, 0x00, 0x06, 0x60, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x0c, 0x61, 0xc0, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xfc, 0x07, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x7f, 0xc0, 0x00, 0x38, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x19, 0xff, 0xff, 0xf8, 0x60, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x0f, 0xfc, 0x40, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x0c, 0x40, 0x00, 0x00, 0x10, 0x08, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x0c, 0x40, 0x00, 0x00, 0x30, 0x0c, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x0c, 0x40, 0x00, 0x00, 0x30, 0x0c, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xb0, 0x00, 0x00, 0x0c, 0x40, 0x00, 0x00, 0x30, 0x0c, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x0c, 0x40, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0e, 0xc0, 0x00, 0x00, 0x0c, 0x40, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x04, 0xc0, 0x00, 0x00, 0x0c, 0x40, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x04, 0xc0, 0x00, 0x00, 0x0c, 0x40, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0c, 0xc0, 0x00, 0x00, 0x0c, 0x40, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0c, 0x40, 0x00, 0x00, 0x0c, 0x40, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x08, 0x60, 0x00, 0x00, 0x0c, 0x40, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x08, 0x60, 0x00, 0x3f, 0xfc, 0x40, 0x00, 0x01, 0x80, 0x01, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x18, 0x20, 0x00, 0xe0, 0x0c, 0x40, 0x00, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x18, 0x20, 0x01, 0x80, 0x0c, 0x40, 0x00, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x10, 0x30, 0x03, 0x00, 0x0c, 0x40, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x30, 0x30, 0x06, 0x00, 0x0c, 0x40, 0x00, 0x03, 0x00, 0x00, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x30, 0x10, 0x0c, 0x00, 0x0c, 0x40, 0x38, 0x03, 0x00, 0x00, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x20, 0x18, 0x18, 0x00, 0x0c, 0x40, 0x48, 0x02, 0x00, 0x00, 0x40, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x60, 0x18, 0x30, 0x00, 0x1c, 0x41, 0x88, 0x06, 0x00, 0x00, 0x60, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x60, 0x08, 0x60, 0x00, 0x2c, 0x42, 0x08, 0x06, 0x00, 0x00, 0x60, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x40, 0x0c, 0x60, 0x00, 0x2c, 0x48, 0x08, 0x04, 0x00, 0x10, 0x20, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x40, 0x0c, 0xc0, 0x00, 0x4c, 0x70, 0x08, 0x04, 0x00, 0x7e, 0x20, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xc0, 0x04, 0xc0, 0x00, 0x0c, 0x40, 0x00, 0x0c, 0x07, 0xff, 0x30, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xc0, 0x05, 0x80, 0x00, 0x8d, 0x40, 0x10, 0x0c, 0x3e, 0x07, 0x30, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x8e, 0x40, 0x10, 0x08, 0xed, 0x00, 0x10, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0x86, 0x07, 0x00, 0x00, 0xbc, 0x40, 0x10, 0x1b, 0x64, 0x86, 0x58, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0x8d, 0x86, 0x00, 0x00, 0x0c, 0x40, 0x20, 0x1f, 0x86, 0x9f, 0x18, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0x18, 0x47, 0x00, 0x00, 0x0c, 0x40, 0x20, 0x13, 0xc6, 0x1d, 0x28, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0x08, 0x8f, 0x00, 0x00, 0x0c, 0x40, 0x20, 0x33, 0xe6, 0x3e, 0x2c, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0x08, 0x9d, 0x00, 0x00, 0x0c, 0x40, 0x00, 0x31, 0xce, 0x1e, 0x2c, 0x00, 0x00, 
  0x00, 0x00, 0x02, 0x1b, 0xbd, 0x80, 0x00, 0x0c, 0x40, 0x40, 0x27, 0xc8, 0x80, 0x24, 0x00, 0x00, 
  0x00, 0x00, 0x02, 0x30, 0x69, 0x80, 0x00, 0x0c, 0x40, 0x40, 0x2e, 0xc0, 0x80, 0x24, 0x00, 0x00, 
  0x00, 0x00, 0x06, 0x21, 0xf8, 0x80, 0x00, 0x0c, 0x40, 0x40, 0x7f, 0xf9, 0xfc, 0x26, 0x00, 0x00, 
  0x00, 0x00, 0x06, 0x67, 0xf8, 0x80, 0x00, 0x0c, 0x40, 0x43, 0xef, 0xff, 0xfe, 0x26, 0x00, 0x00, 
  0x00, 0x00, 0x04, 0x6f, 0x78, 0xc0, 0x00, 0x0c, 0x40, 0x4c, 0x40, 0x08, 0x1e, 0x12, 0x00, 0x00, 
  0x00, 0x00, 0x0c, 0x23, 0x78, 0xc0, 0x00, 0x0c, 0x40, 0x60, 0xc0, 0x00, 0x0b, 0x53, 0x00, 0x00, 
  0x00, 0x00, 0x0c, 0x26, 0x70, 0x40, 0x00, 0x0c, 0x40, 0x00, 0xc0, 0x00, 0x04, 0x63, 0x00, 0x00, 
  0x00, 0x00, 0x08, 0x3c, 0x20, 0x60, 0x00, 0x0c, 0x40, 0x00, 0x80, 0x00, 0x0f, 0x41, 0x00, 0x00, 
  0x00, 0x00, 0x18, 0x20, 0x10, 0x60, 0x00, 0x0c, 0x40, 0x01, 0x80, 0x00, 0x1f, 0xe1, 0x80, 0x00, 
  0x00, 0x00, 0x18, 0x10, 0x10, 0x20, 0x00, 0x0c, 0x40, 0x01, 0x80, 0x00, 0x0f, 0xe1, 0x80, 0x00, 
  0x00, 0x00, 0x10, 0x10, 0x10, 0x30, 0x00, 0x0c, 0x60, 0x01, 0x00, 0x00, 0x05, 0xe0, 0x80, 0x00, 
  0x00, 0x00, 0x10, 0x10, 0x10, 0x30, 0x00, 0x1c, 0x70, 0x01, 0x00, 0x00, 0x02, 0xe0, 0x80, 0x00, 
  0x00, 0x00, 0x30, 0x0e, 0xf8, 0x30, 0x00, 0x30, 0x30, 0x03, 0x00, 0x00, 0x03, 0x60, 0xc0, 0x00, 
  0x00, 0x00, 0x30, 0x08, 0x08, 0x10, 0x00, 0x18, 0x30, 0x03, 0x00, 0x00, 0x01, 0xc0, 0xc0, 0x00, 
  0x00, 0x00, 0x20, 0x08, 0x08, 0x18, 0x00, 0x1c, 0x60, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 
  0x00, 0x00, 0x60, 0x04, 0x68, 0x18, 0x00, 0x0c, 0x60, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 
  0x00, 0x00, 0x60, 0x04, 0x68, 0x08, 0x00, 0x08, 0x60, 0x00, 0xc0, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x00, 0x00, 0x40, 0x04, 0x68, 0x0c, 0x00, 0x08, 0x20, 0x00, 0x70, 0x00, 0x00, 0x0e, 0x00, 0x00, 
  0x00, 0x00, 0xc0, 0x04, 0x68, 0x0c, 0x00, 0x18, 0x20, 0x00, 0x3e, 0x00, 0x00, 0x7c, 0x00, 0x00, 
  0x00, 0x00, 0xc0, 0x04, 0x68, 0x04, 0x00, 0x18, 0x30, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x00, 
  0x00, 0x00, 0x80, 0x07, 0xd0, 0x06, 0x00, 0x10, 0x30, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x80, 0x05, 0x90, 0x06, 0x00, 0x10, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x80, 0x05, 0x90, 0x06, 0x00, 0x30, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x80, 0x0d, 0xb0, 0x02, 0x00, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x00, 0x0a, 0xa0, 0x03, 0x00, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0x00, 0x0a, 0xa0, 0x03, 0x00, 0x20, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0x00, 0x0a, 0xa0, 0x01, 0x00, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x02, 0x00, 0x0a, 0xa0, 0x01, 0x80, 0x60, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x02, 0x00, 0x16, 0xb0, 0x01, 0x80, 0x60, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x02, 0x00, 0x1c, 0x70, 0x01, 0x80, 0x60, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0x80, 0x60, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x60, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x80, 0x00, 0x00, 0x07, 0x00, 0x60, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xe0, 0x00, 0x00, 0x1e, 0x00, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7c, 0x00, 0x00, 0x78, 0x00, 0x30, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xff, 0xfe, 0x00, 0x00, 0x0c, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

/*const GFXbitmapGlyph splashPageGlyphs [] PROGMEM = {
  { 0, 128, 128, 0, '0' } // 'Artboard 1'
};

const GFXbitmapFont splashPageFont PROGMEM = {
  (uint8_t *)splashPageBitmap,
  (GFXbitmapGlyph *)splashPageGlyphs,
  1
};*/



// GLOBAL VARIABLES
float weight;  // holds the current weight value from the load cell
long t = 0;        // holds timer value used in weight load cell calculations
float loadCellCalibrationFactor = 102;  // used to calibrate the specific setup of this load cell.  Should be adjusted to achieve precise, controlled weight.
int scaleLoopBreak = 0;   // forces the display screen to update after weightLoopCount cycles when on the SCALE menu even if no buttons have been pressed
int scaleLoopCounter = 0; // holds the number of current cycles through the loop function since last screen update

volatile boolean up = false;
volatile boolean down = false;
volatile boolean middle = false;
volatile boolean hom = false;

int upButtonState = 0;
int downButtonState = 0;
int middleButtonState = 0;
int homeButtonState = 0;
int lastUpButtonState = 0;
int lastDownButtonState = 0;
int lastMiddleButtonState = 0;
int lastHomeButtonState = 0;

int currentMenuPage = 0;  // holds the current menu page to be displayed;
                          // page structure for this integer will be...
                          // 1   = Menu page 1
                          // 11  = Sub menu 1 of page 1
                          // 12  = Sub menu 2 of page 1
                          // 121 = Sub menu 1 of sub menu 2 of page 1
int currentMenuItem = 0;  // holds the currently selected item "cursor" within the chosen menu page
int screenStartingY = 0;  // allows the text on the screen to start from the Y position;  used in the Lakes screens to scroll text on button presses


// -----------------------------------------------------------------------------------
// INITIAL SETUP ROUTINE - runs ONCE on UNO startup
// -----------------------------------------------------------------------------------
void setup() {

  // initialize the serial interface for logging messages during execution...for debugging
  Serial.begin(9600);
  Serial.println("Starting up the Fish Legalizer...");

  // initialize the TFT display
  tft.initR(INITR_144GREENTAB);   // initialize a ST7735S chip, black tab
  tft.fillScreen(BLACK);
  tft.setRotation(3);
  Serial.println("...TFT initialized...");

  // initialize the LoadCell
  LoadCell.begin();
  long stabilisingTime = 2000; // tare precision can be improved by adding a few seconds of stabilising time
  LoadCell.start(stabilisingTime);
  LoadCell.setCalFactor(loadCellCalibrationFactor); // user set calibration factor (float)
  Serial.println("...LoadCell tare weight completed...");
    
  // initialize the Menu button sensors
  pinMode(UP_PIN, INPUT_PULLUP);
  pinMode(DOWN_PIN, INPUT_PULLUP);
  pinMode(MIDDLE_PIN, INPUT_PULLUP);
  pinMode(HOME_PIN, INPUT_PULLUP);
  Serial.println("...menu button pins initialized...");

  // draw a splash screen on startup
  drawSplash(5000);
  Serial.println("...splash screen draw complete...");
  
  // draw the inital screen display
  drawScreen(currentMenuPage, currentMenuItem);
  Serial.println("...drawing the initial Menu screen...");

  // Initialization complete
  Serial.println("...Initialization COMPLETE!");
}


// -----------------------------------------------------------------------------------
// EXECUTION LOOP - runs CONTINUOUSLY
// -----------------------------------------------------------------------------------
void loop() {

  upButtonState = digitalRead(UP_PIN);
  downButtonState = digitalRead(DOWN_PIN);
  middleButtonState = digitalRead(MIDDLE_PIN);
  homeButtonState = digitalRead(HOME_PIN);

  weight = readLoadCellWeight(weight);  // reads the current weight value from the load cell during EACH loop cycle

  checkIfUpButtonIsPressed();
  checkIfDownButtonIsPressed();
  checkIfMiddleButtonIsPressed();
  checkIfHomeButtonIsPressed();

  // NOTE:  with the exception of the SCALE screen routine below, the only time we update the screen is when
  //        something has changed that would require screen update.  This should keep our "loop" as efficient as possible
  //        since we avoid unnecessary screen redraws.

  // if we are trying to display the weight of the item on the load cell and we have selected the SCALE menu, then
  //     we will update the screen periodically to show the new weight.  We do this in case their is a load settling on the
  //     load cell.  Otherwise, it would call only once and not update until buttons were pressed.
  if ((currentMenuPage == 1) && (scaleLoopCounter >= scaleLoopBreak)) {
    // rather than use the drawScreen function (which is used for general screen draws between menu changes, we'll do something
    //     different here to try and help the scale results show up better/faster
    //drawScreen(currentMenuPage, currentMenuItem);
    drawScaleWeightScreen();
    Serial.print("current weight value is: ");
    Serial.println(weight);
    scaleLoopCounter = 0;
  } else {
    scaleLoopCounter++;
  }

}


//
// readLoadCellWeight - reads the load cells current value and converts to weight, in pounds.
//     RETURNS:  float value of weight in lbs
//
float readLoadCellWeight(float previousWeight) {
  //local vars
  float calculatedLoad = previousWeight;                // stores the values read from the load cell for processing
  float weightAdjustment = 0.00220462262;  // float value to adjust the value read from the load cell to pounds

  // update() should be called at least as often as HX711 sample rate; >10Hz@10SPS, >80Hz@80SPS;
  // longer delay in scetch will reduce effective sample rate (be carefull with delay() in loop)
  LoadCell.update();

  //get smoothed value from data set + current calibration factor
  if (millis() > t + 250) {
    float i = LoadCell.getData();
    if(i < 200){
      calculatedLoad = 0;
    } else {
      calculatedLoad = i*weightAdjustment;
    }
    Serial.print("Load_cell output val: ");
    Serial.println(calculatedLoad);
    t = millis();
  }

  //receive from serial terminal
  if (Serial.available() > 0) {
    float i;
    char inByte = Serial.read();
    if (inByte == 't') LoadCell.tareNoDelay();
  }

  //check if last tare operation is complete
  if (LoadCell.getTareStatus() == true) {
    Serial.println("Tare complete");
  }

  // return the calculated weight value
  return calculatedLoad;
}


//
// checkIfUpButtonIsPressed
//
void checkIfUpButtonIsPressed()
{
  if (upButtonState != lastUpButtonState) {
    if (upButtonState == LOW) {
      Serial.println("UP button pressed...went LOW.");
      up = true;
      updateMenu();
    } else {
      up = false;
      Serial.println("UP button pressed...went HIGH.");
    }
    delay(50);
  }
  lastUpButtonState = upButtonState;
}


//
// checkIfDownButtonIsPressed
//
void checkIfDownButtonIsPressed()
{
  if (downButtonState != lastDownButtonState) {
    if (downButtonState == LOW) {
      Serial.println("DOWN button pressed...went LOW.");
      down = true;
      updateMenu();
    } else {
      down = false;
      Serial.println("DOWN button pressed...went HIGH.");
    }
    delay(50);
  }
  lastDownButtonState = downButtonState;
}


//
// checkIfMiddleButtonIsPressed
//
void checkIfMiddleButtonIsPressed()
{
  if (middleButtonState != lastMiddleButtonState) {
    if (middleButtonState == LOW) {
      middle = true;
      updateMenu();
      Serial.println("MIDDLE button pressed...went LOW.");
    } else {
      middle = false;
      Serial.println("MIDDLE button pressed...went HIGH.");
    }
    delay(50);
    
  }
  lastMiddleButtonState = middleButtonState;
}

//
// checkIfHomeButtonIsPressed
//
void checkIfHomeButtonIsPressed()
{
  if (homeButtonState != lastHomeButtonState) {
    if (homeButtonState == LOW) {
      hom = true;
      updateMenu();
      Serial.println("HOME button pressed...went LOW.");
    } else {
      hom = false;
      Serial.println("HOME button pressed...went HIGH.");
    }
    delay(50);
    
  }
  lastHomeButtonState = homeButtonState;
}


//
// updateMenu - contains the menu structure to know what actions to take with each button press
//
void updateMenu() {
  
  switch (currentMenuPage) {
    // process presses from MAIN MENU
    case 0:
      // if on Menu Item 0 = SCALE
      if ((currentMenuItem == 0) && (up == true)) {
        currentMenuItem = 3; // move cursor to bottom row
      } else if ((currentMenuItem == 0) && (down == true)) {
        currentMenuItem++; // move cursor down one row
      } else if ((currentMenuItem == 0) && (middle == true)) {
        // go into SUBMENU 1 = SCALE
        currentMenuPage = 1;
        currentMenuItem = 0;
      } else if ((currentMenuItem == 0) && (hom == true)) {
        currentMenuPage = 0;
        currentMenuItem = 0;
      } 
      // if on Menu Item 1 = LIMITS
        else if ((currentMenuItem == 1) && (up == true)) {
          currentMenuItem--; //cursor up
      } else if ((currentMenuItem == 1) && (down == true)) {
          currentMenuItem++; //cursor down
      } else if ((currentMenuItem == 1) && (middle == true)) {
        // go into SUBMENU 2 = LIMITS
        currentMenuPage = 2;
        currentMenuItem = 0;
      } else if ((currentMenuItem == 1) && (hom == true)) {
        // return to TOP MENU
        currentMenuPage = 0;
        currentMenuItem = 0;
      } 
      // if on Menu Item 2 = HELP
        else if ((currentMenuItem == 2) && (up == true)) {
          currentMenuItem--; //cursor up
      } else if ((currentMenuItem == 2) && (down == true)) {
          currentMenuItem++; //cursor down
      } else if ((currentMenuItem == 2) && (middle == true)) {
        // go into SUBMENU 3 = HELP
        currentMenuPage = 3;
        currentMenuItem = 0;
      } else if ((currentMenuItem == 2) && (hom == true)) {
        // return to TOP MENU
        currentMenuPage = 0;
        currentMenuItem = 0;
      } 
      // if on Menu Item 3 = ABOUT
        else if ((currentMenuItem == 3) && (up == true)) {
          currentMenuItem--; //cursor up
      } else if ((currentMenuItem == 3) && (down == true)) {
          currentMenuItem = 0; //cursor down
      } else if ((currentMenuItem == 3) && (middle == true)) {
        // go into SUBMENU 4 = ABOUT
        currentMenuPage = 4;
        currentMenuItem = 0;
      } else if ((currentMenuItem == 3) && (hom == true)) {
        // return to TOP MENU
        currentMenuPage = 0;
        currentMenuItem = 0;
      }
      break;

    // process presses from SCALE MENU
    case 1:
      if ((currentMenuItem == 0) && (up == true)) {
        // do nothing
      } else if ((currentMenuItem == 0) && (down == true)) {
        // do nothing
      } else if ((currentMenuItem == 0) && (middle == true)) {
        // do nothing
      } else if ((currentMenuItem == 0) && (hom == true)) {
        currentMenuPage = 0;
        currentMenuItem = 0;
      }
      break;

    // process presses from LIMITS MENU 
    case 2:
       if ((currentMenuItem == 0) && (up == true)) {
        currentMenuItem = 4; // move cursor to bottom row
      } else if ((currentMenuItem == 0) && (down == true)) {
        currentMenuItem++; // move cursor down one row
      } else if ((currentMenuItem == 0) && (middle == true)) {
        // go into SUBMENU 5 = Oconee
        currentMenuPage = 5;
        currentMenuItem = 0;
      } else if ((currentMenuItem == 0) && (hom == true)) {
        currentMenuPage = 0;
        currentMenuItem = 0;
      } 
      // if on Menu Item 1 = Lake 2
        else if ((currentMenuItem == 1) && (up == true)) {
          currentMenuItem--; //cursor up
      } else if ((currentMenuItem == 1) && (down == true)) {
          currentMenuItem++; //cursor down
      } else if ((currentMenuItem == 1) && (middle == true)) {
        // go into SUBMENU 6 = Lake 2
        currentMenuPage = 6;
        currentMenuItem = 0;
      } else if ((currentMenuItem == 1) && (hom == true)) {
        // return to TOP MENU
        currentMenuPage = 0;
        currentMenuItem = 0;
      } 
      // if on Menu Item 2 = Lake 3
        else if ((currentMenuItem == 2) && (up == true)) {
          currentMenuItem--; //cursor up
      } else if ((currentMenuItem == 2) && (down == true)) {
          currentMenuItem++; //cursor down
      } else if ((currentMenuItem == 2) && (middle == true)) {
        // go into SUBMENU 7 = Lake 3
        currentMenuPage = 7;
        currentMenuItem = 0;
      } else if ((currentMenuItem == 2) && (hom == true)) {
        // return to TOP MENU
        currentMenuPage = 0;
        currentMenuItem = 0;
      } 
      // if on Menu Item 3 = Lake 4
        else if ((currentMenuItem == 3) && (up == true)) {
          currentMenuItem--; //cursor up
      } else if ((currentMenuItem == 3) && (down == true)) {
          currentMenuItem = 4; //cursor down
      } else if ((currentMenuItem == 3) && (middle == true)) {
        // go into SUBMENU 8 = Lake 4
        currentMenuPage = 8;
        currentMenuItem = 0;
      } else if ((currentMenuItem == 3) && (hom == true)) {
        // return to TOP MENU
        currentMenuPage = 0;
        currentMenuItem = 0;
      }
      // if on Menu Item 4 = Lake 5
        else if ((currentMenuItem == 4) && (up == true)) {
          currentMenuItem--; //cursor up
      } else if ((currentMenuItem == 4) && (down == true)) {
          currentMenuItem = 0; //cursor down
      } else if ((currentMenuItem == 4) && (middle == true)) {
        // go into SUBMENU 9 = Lake 5
        currentMenuPage = 9;
        currentMenuItem = 0;
      } else if ((currentMenuItem == 4) && (hom == true)) {
        // return to TOP MENU
        currentMenuPage = 0;
        currentMenuItem = 0;
      }
      break;

    // process presses from HELP MENU
    case 3:
      if ((currentMenuItem == 0) && (up == true)) {
        // do nothing
      } else if ((currentMenuItem == 0) && (down == true)) {
        // do nothing
      } else if ((currentMenuItem == 0) && (middle == true)) {
        // do nothing
      } else if ((currentMenuItem == 0) && (hom == true)) {
        currentMenuPage = 0;
        currentMenuItem = 0;
      }
      break;

    // process presses from the ABOUT MENU
    case 4:
      if ((currentMenuItem == 0) && (up == true)) {
        // do nothing
      } else if ((currentMenuItem == 0) && (down == true)) {
        // do nothing
      } else if ((currentMenuItem == 0) && (middle == true)) {
        // do nothing
      } else if ((currentMenuItem == 0) && (hom == true)) {
        currentMenuPage = 0;
        currentMenuItem = 0;
      }
      break;

    // handle all of the "Lake" menus that hang off of the "LIMITS" menu...all of their functionality is the same
    // 5=Lake Oconee; 6=Lake Hartwell; 7=Lake Lanier; 8=Lake Seminole; 9=Lake Jackson
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      if ((currentMenuItem == 0) && (up == true)) {
        // move the screen up
        if (screenStartingY >= 0) {
          screenStartingY = 0;
        } else {
          screenStartingY = screenStartingY + 20;
        }
      } else if ((currentMenuItem == 0) && (down == true)) {
        // move the screen down
        // may want to put a limit on this
        if (screenStartingY >= -60) {
            screenStartingY = screenStartingY - 20;
        }
        
      } else if ((currentMenuItem == 0) && (middle == true)) {
        // do nothing
      } else if ((currentMenuItem == 0) && (hom == true)) {
        currentMenuPage = 0;
        currentMenuItem = 0;
      }
      break;
      
  } // end SWITCH

  drawScreen(currentMenuPage, currentMenuItem);
} //end void updateMenu()


//
// drawScreen - handles what should be shown on the screen at any given time
//
void drawScreen(int menuPageShown, int menuItemSelected) {
  
  tft.fillScreen(BLACK);  // blank the screen out before it redraws each time.

  // common settings for our TFT menu display
  tft.setTextWrap(false);    // COMMENT THIS OUT AFTER LOAD CELL IS BACK IN PLAY
  tft.setTextSize(2);

  // MENU PAGE 0 - MAIN MENU
  if (menuPageShown == 0) {
    tft.setTextColor(WHITE, BLACK);
    tft.setCursor(9, 0);
    tft.print("MAIN MENU");

    if (menuItemSelected == 0) {
      tft.setTextColor(BLACK, WHITE);
    } else {
      tft.setTextColor(WHITE, BLACK);
    }
    tft.setCursor(0, 35);
    tft.print(">Scale");

    if (menuItemSelected == 1) {
      tft.setTextColor(BLACK, WHITE);
    } else {
      tft.setTextColor(WHITE, BLACK);
    }
    tft.setCursor(0, 55);
    tft.print(">Limits");

    if (menuItemSelected == 2) {
      tft.setTextColor(BLACK, WHITE);
    } else {
      tft.setTextColor(WHITE, BLACK);
    }
    tft.setCursor(0, 75);
    tft.print(">Help");

    if (menuItemSelected == 3) {
      tft.setTextColor(BLACK, WHITE);
    } else {
      tft.setTextColor(WHITE, BLACK);
    }
    tft.setCursor(0, 95);
    tft.print(">About");
  }

  // MENU PAGE 1 - SCALE
  if (menuPageShown == 1) {
    tft.setTextColor(BLACK, WHITE);
    tft.setCursor(35, 0);
    tft.print("SCALE");
    tft.setTextColor(WHITE, BLACK);

    // show the weight that is currently read from the scale
    tft.setCursor(40,90);
    tft.setTextSize(2);
    tft.setTextWrap(false);
    tft.print("lbs.");
    tft.setCursor(4,50);
    tft.setTextSize(5);
    tft.print(weight);
    tft.print(" ");
  }

  // MENU PAGE 2 - Limits
  if (menuPageShown == 2) {
    tft.setTextColor(BLACK, WHITE);
    tft.setCursor(27, 0);
    tft.print("Limits");

    if (menuItemSelected == 0) {
      tft.setTextColor(BLACK, WHITE);
    } else {
      tft.setTextColor(WHITE, BLACK);
    }
    tft.setCursor(0, 35);
    tft.setTextSize(1.5);
    tft.print(">Lake Oconee");

    if (menuItemSelected == 1) {
      tft.setTextColor(BLACK, WHITE);
    } else {
      tft.setTextColor(WHITE, BLACK);
    }
    tft.setCursor(0, 55);
    tft.print(">Lake Hartwell");

    if (menuItemSelected == 2) {
      tft.setTextColor(BLACK, WHITE);
    } else {
      tft.setTextColor(WHITE, BLACK);
    }
    tft.setCursor(0, 75);
    tft.print(">Lake Lanier");

    if (menuItemSelected == 3) {
      tft.setTextColor(BLACK, WHITE);
    } else {
      tft.setTextColor(WHITE, BLACK);
    }
    tft.setCursor(0, 95);
    tft.print(">Lake Seminole");

    if (menuItemSelected == 4) {
      tft.setTextColor(BLACK, WHITE);
    } else {
      tft.setTextColor(WHITE, BLACK);
    }
    tft.setCursor(0, 115);
    tft.print(">Lake Jackson");
    
    // whenever this menu is called, we need to reset the starting screen position for the subsequent detailed menus
    screenStartingY = 0; 
  }
  
  // MENU PAGE 3 - Help
  if (menuPageShown == 3) {
    tft.setTextColor(BLACK, WHITE);
    tft.setCursor(38, 0);
    tft.print("HELP");
    tft.setTextColor(WHITE, BLACK);
    tft.setTextWrap(true);
    tft.setCursor(1,20);
    tft.setTextSize(1);
    tft.print("If you need help withthis product please  consult the user     manual. If this does not resolve your     issuse please contactTyler Browning at    tylerdbrowning11@gmail.com");
  }

  // MENU PAGE 4 - About
  if (menuPageShown == 4) {
    tft.setTextColor(BLACK, WHITE);
    tft.setCursor(31, 0);
    tft.print("ABOUT");
    tft.setTextColor(WHITE, BLACK);
    tft.setTextWrap(true);
    tft.setCursor(1,20);
    tft.setTextSize(1);
    tft.print("This project was     created as part of anandvanced prototypingclass at Berry       College. If using    this product and needhelp please contact  Tyler Browning at    tylerdbrowning11@gmail.com");
  } 
  
  // MENU PAGE 5 - Lake Oconee
  if (menuPageShown == 5) {
    tft.setTextColor(BLUE, WHITE);
    tft.setCursor(28, screenStartingY);
    tft.setTextSize(1);
    tft.print("Lake Oconee");
    tft.setTextColor(WHITE, BLACK);
    tft.setTextWrap(true);
    tft.setCursor(1,screenStartingY + 20);
    tft.setTextSize(1);
    tft.print("Bass: 10 per person. Must be over 14      inches");
    tft.setCursor(1,screenStartingY + 50);
    tft.setTextSize(1);
    tft.print("Catfish: 50 per boat without commercial   license. No size     limit");
    tft.setCursor(1,screenStartingY + 88);
    tft.setTextSize(1);
    tft.print("Crappie: 30 per      person. No size limit");
    tft.setCursor(1,screenStartingY + 110);
    tft.setTextSize(1);
    tft.print("Bream/Sunfish: 50 perboat. No size limit");
    tft.setCursor(1,screenStartingY + 133);
    tft.setTextSize(1);
    tft.print("Striped Bass: 15 per person. Only two of  which can be over 22 inches");
  } 

  // MENU PAGE 6 - Lake Hartwell
  if (menuPageShown == 6) {
    tft.setTextSize(1);
    tft.setTextColor(BLUE, WHITE);
    tft.setCursor(25, screenStartingY);
    tft.print("Lake Hartwell"); 
    tft.setTextColor(WHITE, BLACK);  
    tft.setTextWrap(true);
    tft.setCursor(1,screenStartingY + 20);
    tft.setTextSize(1);
    tft.print("Bass: 10 per person. Must be over 12      inches");
    tft.setCursor(1,screenStartingY + 50);
    tft.setTextSize(1);
    tft.print("Catfish: 50 per boat without commercial   license. No size     limit");
    tft.setCursor(1,screenStartingY + 88);
    tft.setTextSize(1);
    tft.print("Crappie: 30 per      person. No size limit");
    tft.setCursor(1,screenStartingY + 110);
    tft.setTextSize(1);
    tft.print("Bream/Sunfish: 50 perboat. No size limit");
    tft.setCursor(1,screenStartingY + 133);
    tft.setTextSize(1);
    tft.print("Striped Bass: 2 per person. Only one of  which can exceed 34 inches");
  } 

  // MENU PAGE 7 - Lake Lanier
  if (menuPageShown == 7) {
    tft.setTextSize(1);
    tft.setTextColor(BLUE, WHITE);
    tft.setCursor(30, screenStartingY + 0);
    tft.print("Lake Lanier");   
    tft.setTextColor(WHITE, BLACK);
    tft.setTextWrap(true);
    tft.setCursor(1,screenStartingY + 20);
    tft.setTextSize(1);
    tft.print("Bass: 10 per person. Must be over 14      inches");
    tft.setCursor(1,screenStartingY + 50);
    tft.setTextSize(1);
    tft.print("Catfish: 50 per boat without commercial   license. No size     limit");
    tft.setCursor(1,screenStartingY + 88);
    tft.setTextSize(1);
    tft.print("Crappie: 30 per      person. No size limit");
    tft.setCursor(1,screenStartingY + 110);
    tft.setTextSize(1);
    tft.print("Bream/Sunfish: 50 perboat. No size limit");
    tft.setCursor(1,screenStartingY + 133);
    tft.setTextSize(1);
    tft.print("Striped Bass: 15 per person. Only two of  which can be over 22 inches");
  } 

  // MENU PAGE 8 - Lake Seminole
  if (menuPageShown == 8) {
    tft.setTextSize(1);
    tft.setTextColor(BLUE, WHITE);
    tft.setCursor(23, screenStartingY + 0);
    tft.print("Lake Seminole"); 
    tft.setTextColor(WHITE, BLACK);
    tft.setTextWrap(true);
    tft.setCursor(1,screenStartingY + 20);
    tft.setTextSize(1); 
    tft.print("Bass: 10 per person. Must be over 12      inches");
    tft.setCursor(1,screenStartingY + 50);
    tft.setTextSize(1);
    tft.print("Catfish: 50 per boat without commercial   license. No size     limit");
    tft.setCursor(1,screenStartingY + 88);
    tft.setTextSize(1);
    tft.print("Crappie: 30 per      person. No size limit");
    tft.setCursor(1,screenStartingY + 110);
    tft.setTextSize(1);
    tft.print("Bream/Sunfish: 50 perboat. No size limit");
    tft.setCursor(1,screenStartingY + 133);
    tft.setTextSize(1);
    tft.print("Striped Bass: 15 per person. Only two of  which can be over 22 inches"); 
  } 

  // MENU PAGE 9 - Lake Jackson
  if (menuPageShown == 9) {
    tft.setTextSize(1);
    tft.setTextColor(BLUE, WHITE);
    tft.setCursor(26, screenStartingY + 0);
    tft.print("Lake Jackson");   
    tft.setTextColor(WHITE, BLACK);
    tft.setTextWrap(true);
    tft.setCursor(1,screenStartingY + 20);
    tft.setTextSize(1);
    tft.print("Bass: 10 per person. Must be over 12      inches");
    tft.setCursor(1,screenStartingY + 50);
    tft.setTextSize(1);
    tft.print("Catfish: 50 per boat without commercial   license. No size     limit");
    tft.setCursor(1,screenStartingY + 88);
    tft.setTextSize(1);
    tft.print("Crappie: 30 per      person. No size limit");
    tft.setCursor(1,screenStartingY + 110);
    tft.setTextSize(1);
    tft.print("Bream/Sunfish: 50 perboat. No size limit");
    tft.setCursor(1,screenStartingY + 133);
    tft.setTextSize(1);
    tft.print("Striped Bass: 15 per person. Only two of  which can be over 22 inches");
  } 

} // end drawScreen()


//
// drawScaleWeightScreen - Special screen update routine that only updates the scale's weight on the screen
//
void drawScaleWeightScreen() {
  tft.setTextColor(WHITE, BLACK);
  tft.setTextSize(5);
  tft.setCursor(4,50);
  tft.print(weight);
  //tft.print(" "); //<-- do we need this extra line here
}


//
// drawSplash - Draws the introductory splash screen upon startup
//   INPUTS:  splashDuration - number of milliseconds to hold the splash screen before continuing
//
void drawSplash(int splashDuration) {
  // show splash info on the screen
  /*tft.setTextSize(1);
  tft.setTextColor(BLUE, WHITE);
  tft.setCursor(26, 0);
  tft.print("...put some SPLASH");   
  tft.setTextColor(WHITE, BLACK);*/

  tft.drawBitmap(0, 0, splashPageBitmap, 128, 128, WHITE);
  
  // hold the splash screen for splashDuration milliseconds
  delay(splashDuration);
}
